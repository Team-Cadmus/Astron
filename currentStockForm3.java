


import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class currentStockForm3 extends javax.swing.JFrame {
    static String designToExtract="";
static int user_rights_binary=0;
ArrayList names=new ArrayList();
Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    /**Base b=new Base();
     * Creates new form currentStockForm3
     */
    public currentStockForm3() {
        
        initComponents();
        //User_Rights();
    setLocation(screenSize.width/2-getWidth()/2, screenSize.height/2-getHeight()/2);
    setVisible(true);
        
        base.setEditable(false);
        base.setRenderer(new currentStockForm3.Demo(base.getRenderer()));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
/*public void User_Rights(){
        //System.out.println(LoginPage.name);
        try{  
                int a=1;
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con=DriverManager.getConnection("jdbc:mysql://sql452.main-hosting.eu:3306/u159657273_bYz4P","u159657273_9OFDL","Vaishnavi$2801");
                String selQuery="SELECT * FROM login_details where  username=? and Admin=?";
                PreparedStatement pst=con.prepareStatement(selQuery);
                pst.setString(1,LoginPage.name);
                pst.setInt(2,a);
                ResultSet rs=pst.executeQuery();
                if(rs.next()){
                    user_rights_binary=1;
                }
                else{
                    user_rights_binary=0;
                }
                //System.out.println(user_rights_binary);
            }
            catch (ClassNotFoundException ex) {
                System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                //Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } 
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        base = new javax.swing.JComboBox<>();
        search = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        design = new javax.swing.JTextField();
        grcleared = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rms = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        millcleared = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        back = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        gr = new javax.swing.JTextField();
        GRCleared = new javax.swing.JTextField();
        mill = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        refrommill = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        rmscleared = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clearence");
        setBackground(new java.awt.Color(137, 196, 147));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("Software_logo.jpeg")).getImage());
        setMinimumSize(new java.awt.Dimension(1180, 690));

        jPanel1.setBackground(new java.awt.Color(31, 35, 71));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 1000));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Base:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(61, 85, 78, 28);

        base.setBackground(new java.awt.Color(249, 173, 129));
        base.setEditable(true);
        base.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        base.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Balatan Butta Rich Pallu", "Raw Slub Butta Rich Pallu", "Blatan Butta Chit Pallu", "Raw Slub Butta Chit Pallu", "Balatan Embose Chit Pallu", "Raw Slub all Over Butta" }));
        base.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                baseMouseClicked(evt);
            }
        });
        jPanel1.add(base);
        base.setBounds(492, 82, 409, 34);

        search.setBackground(new java.awt.Color(255, 138, 115));
        search.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        jPanel1.add(search);
        search.setBounds(930, 80, 223, 37);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Design:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(60, 150, 106, 28);

        design.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        design.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                designMouseClicked(evt);
            }
        });
        design.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                designKeyPressed(evt);
            }
        });
        jPanel1.add(design);
        design.setBounds(490, 140, 409, 34);

        grcleared.setBackground(new java.awt.Color(255, 138, 115));
        grcleared.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        grcleared.setText("GR Cleared");
        grcleared.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grclearedActionPerformed(evt);
            }
        });
        jPanel1.add(grcleared);
        grcleared.setBounds(930, 140, 223, 37);

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("RMS:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(60, 220, 70, 28);

        rms.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(rms);
        rms.setBounds(490, 210, 409, 34);

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("GR:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(60, 340, 178, 28);

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Stock in Mill:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(50, 470, 196, 28);

        millcleared.setBackground(new java.awt.Color(255, 138, 115));
        millcleared.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        millcleared.setText("Mill Cleared");
        millcleared.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                millclearedActionPerformed(evt);
            }
        });
        jPanel1.add(millcleared);
        millcleared.setBounds(930, 210, 223, 37);

        reset.setBackground(new java.awt.Color(255, 138, 115));
        reset.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        jPanel1.add(reset);
        reset.setBounds(930, 470, 223, 37);

        back.setBackground(new java.awt.Color(255, 138, 115));
        back.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(930, 400, 223, 37);

        next.setBackground(new java.awt.Color(255, 138, 115));
        next.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        jPanel1.add(next);
        next.setBounds(930, 550, 223, 37);

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("GR Cleared:");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(50, 400, 178, 28);

        jLabel8.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Stock returned from mill:");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(50, 550, 378, 22);

        jLabel6.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(50, 600, 91, 28);

        gr.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(gr);
        gr.setBounds(490, 330, 409, 34);

        GRCleared.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(GRCleared);
        GRCleared.setBounds(490, 400, 409, 34);

        mill.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(mill);
        mill.setBounds(490, 470, 409, 34);

        total.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(total);
        total.setBounds(490, 600, 409, 34);

        refrommill.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(refrommill);
        refrommill.setBounds(490, 540, 409, 34);

        jLabel9.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 48)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("CLEARANCE");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(375, 12, 404, 52);

        jButton1.setBackground(new java.awt.Color(255, 138, 115));
        jButton1.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jButton1.setText("RMS Cleared");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(930, 280, 223, 37);

        jLabel10.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("RMS Cleared:");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(60, 280, 198, 28);

        rmscleared.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(rmscleared);
        rmscleared.setBounds(490, 270, 409, 34);

        jButton2.setBackground(new java.awt.Color(255, 138, 115));
        jButton2.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jButton2.setText("Clear all");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(930, 340, 223, 37);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        new currentStockForm2();
        dispose();
        
    }//GEN-LAST:event_backActionPerformed
class Demo extends DefaultListCellRenderer{
    // TODO add your handling code here:
    private ListCellRenderer defaultRenderer;
    public Demo(ListCellRenderer defaultRenderer){
        this.defaultRenderer=defaultRenderer;
        
    }
    public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
        Component c = defaultRenderer.getListCellRendererComponent(list, value,
        index, isSelected, cellHasFocus);
    if (c instanceof JLabel) {
      if (isSelected) {
        c.setBackground(new Color(239,40,83));
      } else {
        c.setBackground(Color.white);
      }
    } else {
      c.setBackground(Color.black);
      c = super.getListCellRendererComponent(list, value, index, isSelected,
          cellHasFocus);
    }
        return c;
    }
}
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
 base.setSelectedIndex(0);
 design.setText("");
        rms.setText("");
        gr.setText("");
        mill.setText("");
        total.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_resetActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
if(design.getText().trim().isEmpty()){
            new AlertBox_FieldEmpty().setVisible(true);
}
else{try{
        
      Connection con=null;
    con=ConnectionManager.getConnection();
    String SelectedBase=base.getSelectedItem().toString();
     designToExtract="";
    designToExtract=design.getText().toUpperCase().trim();
    
    if("Balatan Butta Rich Pallu".equals(SelectedBase)){
        String sql="select *from balatan_rich_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Raw Slub Butta Rich Pallu".equals(SelectedBase)){
        String sql="select *from raw_rich_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Balatan Butta Chit Pallu".equals(SelectedBase)){
        String sql="select *from balatan_chit_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Raw Slub Butta Chit Pallu".equals(SelectedBase)){
        String sql="select *from raw_chit_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    if("Balatan Embose Chit Pallu".equals(SelectedBase)){
        String sql="select *from embose_chit_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Raw Slub all Over Butta".equals(SelectedBase)){
        String sql="select *from all_over_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
}
catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }// TODO add your handling code here:
    }                                      
// TODO add your handling c        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void millclearedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_millclearedActionPerformed
        // TODO add your handling code here:
        
            if(design.getText().trim().isEmpty()){
            new Correct_Design().setVisible(true);
        }
            else if(refrommill.getText().trim().isEmpty()){
                new AlertBox_FieldEmpty().setVisible(true);
            }
            else if(mill.getText().equals("0")){
                new Already_Cleared().setVisible(true);
            }
            else if(!Pattern.matches("^[0-9]+$",refrommill.getText())){
            new Invalid_Format().setVisible(true);
             refrommill.setText("");
             refrommill.grabFocus();
        }
            else if(Integer.parseInt(refrommill.getText())>Integer.parseInt(mill.getText())){
                new Invalid_Format().setVisible(true);
            }
            
            else if(design.getText()!=""&&refrommill.getText()!=""){
                try{
        
       
     PreparedStatement pst;
     ResultSet rs;
   Connection con=null;
    con=ConnectionManager.getConnection();
    String selBase=base.getSelectedItem().toString();
    String sql=null;
    
    if("Balatan Butta Rich Pallu".equals(selBase)){
        sql="SELECT * from balatan_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
         if(rs.next()==true){
             mill.setText(String.valueOf(Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText())));
            rms.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(refrommill.getText())));
           
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE balatan_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
                   
                   
            }
            else if("Raw Slub Butta Rich Pallu".equals(selBase)){
                   sql="SELECT * from raw_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
         if(rs.next()==true){
            mill.setText(String.valueOf(Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText())));
            rms.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(refrommill.getText())));
           
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE raw_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            else if("Balatan Butta Chit Pallu".equals(selBase)){
                  sql="SELECT * from balatan_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
         if(rs.next()==true){
            mill.setText(String.valueOf(Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText())));
            rms.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(refrommill.getText())));
           
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE balatan_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Raw Slub Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from raw_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
         if(rs.next()==true){
            mill.setText(String.valueOf(Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText())));
            rms.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(refrommill.getText())));
           
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE raw_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            else if("Balatan Embose Chit Pallu".equals(selBase)){
                   sql="SELECT * from embose_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
         if(rs.next()==true){
            mill.setText(String.valueOf(Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText())));
            rms.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(refrommill.getText())));
           
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE embose_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            else if("Raw Slub all Over Butta".equals(selBase)){
                   sql="SELECT * from all_over_butta WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
         if(rs.next()==true){
            mill.setText(String.valueOf(Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText())));
            rms.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(refrommill.getText())));
           
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE all_over_butta SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            pst=con.prepareStatement(sql);
            pst.setString(1,rms.getText().trim());
            pst.setString(2,gr.getText().trim());
            pst.setString(3,mill.getText().trim());
            pst.setString(4,total.getText().trim());
            pst.setString(5,design.getText().trim().toUpperCase());
         
            pst.executeUpdate();
            /*base.setSelectedIndex(0);
            design.setText("");
            rms.setText("");
            gr.setText("");
            refrommill.setText("");
            GRCleared.setText("");
            mill.setText("");
            total.setText("");*/
            new Update_record().setVisible(true);
    
        }
                catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }
        }
        
        
    }//GEN-LAST:event_millclearedActionPerformed

    private void grclearedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grclearedActionPerformed
        // TODO add your handling code here:
         
              if(design.getText().trim().isEmpty()){
            new Correct_Design().setVisible(true);
        }
              else if(GRCleared.getText().trim().isEmpty()){
                  new AlertBox_FieldEmpty().setVisible(true);
              }
             else if(gr.getText().equals("0")){
            new Already_Cleared().setVisible(true);
        }
             else if(!Pattern.matches("^[0-9]+$",GRCleared.getText())){
            new Invalid_Format().setVisible(true);
             GRCleared.setText("");
             GRCleared.grabFocus();
        }
             else if(Integer.parseInt(GRCleared.getText())>Integer.parseInt(gr.getText())){
                new Invalid_Format().setVisible(true);
            }
              
             else if(design.getText()!=""&&GRCleared.getText()!=""){
                  
                 try{
      
     PreparedStatement pst;
    Connection con=null;
    con=ConnectionManager.getConnection();
    String selBase=base.getSelectedItem().toString();
    String sql=null;
    ResultSet rs;
    
    if("Balatan Butta Rich Pallu".equals(selBase)){
        sql="SELECT * from balatan_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(GRCleared.getText());
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
                   sql="UPDATE balatan_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        else{
            
            JOptionPane.showMessageDialog(this, "You cannot change design name");
            
        }
    }
            else if("Raw Slub Butta Rich Pallu".equals(selBase)){
                   sql="SELECT * from raw_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(GRCleared.getText());
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
                   sql="UPDATE raw_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            else if("Balatan Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from balatan_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(GRCleared.getText());
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
                   sql="UPDATE balatan_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Raw Slub Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from raw_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum+"");
            
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(GRCleared.getText());
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
                   sql="UPDATE raw_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            else if("Balatan Embose Chit Pallu".equals(selBase)){
                   sql="SELECT * from embose_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(GRCleared.getText());
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
                   sql="UPDATE embose_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Raw Slub all Over Butta".equals(selBase)){
                   sql="SELECT * from all_over_butta WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(GRCleared.getText());
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
                   sql="UPDATE all_over_butta SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            pst=con.prepareStatement(sql);
            pst.setString(1,rms.getText().trim());
            pst.setString(2,gr.getText().trim());
            pst.setString(3,mill.getText().trim());
            pst.setString(4,total.getText().trim());
            pst.setString(5,design.getText().trim().toUpperCase());
            pst.executeUpdate();
            /*base.setSelectedIndex(0);
            design.setText("");
            rms.setText("");
            gr.setText("");
            rmscleared.setText("");
            GRCleared.setText("");
            refrommill.setText("");
            mill.setText("");
            total.setText("");*/
            new Update_record().setVisible(true);
    
         }
                 catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }
         
              
             }
         
         
    }//GEN-LAST:event_grclearedActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
new currentStockForm4part2();
dispose();// TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

              if(design.getText().trim().isEmpty()){
            new Correct_Design().setVisible(true);
        }
              else if(rmscleared.getText().trim().isEmpty()){
                  new AlertBox_FieldEmpty().setVisible(true);
              }
             else if(rms.getText().equals("0")){
            new Already_Cleared().setVisible(true);
        } else if(!Pattern.matches("^[0-9]+$",rmscleared.getText())){
            new Invalid_Format().setVisible(true);
             rmscleared.setText("");
             rmscleared.grabFocus();
        }
             else if(Integer.parseInt(rmscleared.getText())>Integer.parseInt(rms.getText())){
                new Invalid_Format().setVisible(true);
            }
             
             else if(rmscleared.getText()!=""&&design.getText()!=""){ 
                 
                 try{
        
     PreparedStatement pst;
   Connection con=null;
    con=ConnectionManager.getConnection();
    String selBase=base.getSelectedItem().toString();
    String sql=null;
    ResultSet rs;
    
    if("Balatan Butta Rich Pallu".equals(selBase)){
        sql="SELECT * from balatan_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(rmscleared.getText());
            total.setText(tot+"");
            rmscleared.setText(String.valueOf(0));
                   sql="UPDATE balatan_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
    }
            else if("Raw Slub Butta Rich Pallu".equals(selBase)){
                   sql="SELECT * from raw_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(rmscleared.getText());
            total.setText(tot+"");
            rmscleared.setText(String.valueOf(0));
                   sql="UPDATE raw_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Balatan Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from balatan_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(rmscleared.getText());
            total.setText(tot+"");
            rmscleared.setText(String.valueOf(0));
                   sql="UPDATE balatan_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Raw Slub Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from raw_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum+"");
            
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(rmscleared.getText());
            total.setText(tot+"");
            rmscleared.setText(String.valueOf(0));
                   sql="UPDATE raw_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
                   }
            else if("Balatan Embose Chit Pallu".equals(selBase)){
                   sql="SELECT * from embose_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(rmscleared.getText());
            total.setText(tot+"");
            rmscleared.setText(String.valueOf(0));
                   sql="UPDATE embose_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Raw Slub all Over Butta".equals(selBase)){
                   sql="SELECT * from all_over_butta WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum+"");
            int tot=Integer.parseInt(total.getText())-Integer.parseInt(rmscleared.getText());
            total.setText(tot+"");
            rmscleared.setText(String.valueOf(0));
                   sql="UPDATE all_over_butta SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            pst=con.prepareStatement(sql);
            pst.setString(1,rms.getText().trim());
            pst.setString(2,gr.getText().trim());
            pst.setString(3,mill.getText().trim());
            pst.setString(4,total.getText().trim());
            pst.setString(5,design.getText().trim().toUpperCase());
            pst.executeUpdate();
            /*base.setSelectedIndex(0);
            design.setText("");
            rms.setText("");
            gr.setText("");
            GRCleared.setText("");
            refrommill.setText("");
            rmscleared.setText("");
            mill.setText("");
            total.setText("");*/
            new Update_record().setVisible(true);
    
         }
                 catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }  
         
              
             }


               // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
if(design.getText().trim().isEmpty()){
            new Correct_Design().setVisible(true);
        }
              else if(GRCleared.getText().trim().isEmpty()||rmscleared.getText().trim().isEmpty()||millcleared.getText().trim().isEmpty()){
                  new AlertBox_FieldEmpty().setVisible(true);
              }
             else if(gr.getText().equals("0")||rms.getText().equals("0")||mill.getText().equals(0)){
            new Already_Cleared().setVisible(true);
        }
             else if(!Pattern.matches("^[0-9]+$",rmscleared.getText())){
            new Invalid_Format().setVisible(true);
             rmscleared.setText("");
             rmscleared.grabFocus();
        }
        else if(!Pattern.matches("^[0-9]+$",GRCleared.getText())){
            new Invalid_Format().setVisible(true);
             GRCleared.setText("");
             GRCleared.grabFocus();
        }
        else if(!Pattern.matches("^[0-9]+$",refrommill.getText())){
            new Invalid_Format().setVisible(true);
             refrommill.setText("");
             refrommill.grabFocus();
        }
             else if((Integer.parseInt(GRCleared.getText())>Integer.parseInt(gr.getText()))||(Integer.parseInt(rmscleared.getText())>Integer.parseInt(rms.getText()))||(Integer.parseInt(refrommill.getText())>Integer.parseInt(mill.getText()))){
                new Invalid_Format().setVisible(true);
            }
            
             else if(design.getText()!=""&&GRCleared.getText()!=""&&rmscleared.getText()!=""&&refrommill.getText()!=""){
                  
                 try{
        
     PreparedStatement pst;
    Connection con=null;
    con=ConnectionManager.getConnection();
    String selBase=base.getSelectedItem().toString();
    String sql=null;
    ResultSet rs;
    
    if("Balatan Butta Rich Pallu".equals(selBase)){
        sql="SELECT * from balatan_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum1=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum1+"");
            int sum2=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum2+"");
            int sum3=Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText());
            mill.setText(sum3+"");
            int tot=Integer.parseInt(total.getText())-(Integer.parseInt(GRCleared.getText())+Integer.parseInt(rmscleared.getText())+Integer.parseInt(refrommill.getText()));
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
            rmscleared.setText(String.valueOf(0));
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE balatan_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
    }
            else if("Raw Slub Butta Rich Pallu".equals(selBase)){
                   sql="SELECT * from raw_rich_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum1=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum1+"");
            int sum2=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum2+"");
            int sum3=Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText());
            mill.setText(sum3+"");
            int tot=Integer.parseInt(total.getText())-(Integer.parseInt(GRCleared.getText())+Integer.parseInt(rmscleared.getText())+Integer.parseInt(refrommill.getText()));
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
            rmscleared.setText(String.valueOf(0));
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE raw_rich_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Balatan Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from balatan_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
           int sum1=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum1+"");
            int sum2=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum2+"");
            int sum3=Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText());
            mill.setText(sum3+"");
            int tot=Integer.parseInt(total.getText())-(Integer.parseInt(GRCleared.getText())+Integer.parseInt(rmscleared.getText())+Integer.parseInt(refrommill.getText()));
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
            rmscleared.setText(String.valueOf(0));
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE balatan_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Raw Slub Butta Chit Pallu".equals(selBase)){
                   sql="SELECT * from raw_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum1=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum1+"");
            int sum2=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum2+"");
            int sum3=Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText());
            mill.setText(sum3+"");
            int tot=Integer.parseInt(total.getText())-(Integer.parseInt(GRCleared.getText())+Integer.parseInt(rmscleared.getText())+Integer.parseInt(refrommill.getText()));
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
            rmscleared.setText(String.valueOf(0));
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE raw_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
        
            }
            else if("Balatan Embose Chit Pallu".equals(selBase)){
                   sql="SELECT * from embose_chit_pallu WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum1=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum1+"");
            int sum2=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum2+"");
            int sum3=Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText());
            mill.setText(sum3+"");
            int tot=Integer.parseInt(total.getText())-(Integer.parseInt(GRCleared.getText())+Integer.parseInt(rmscleared.getText())+Integer.parseInt(refrommill.getText()));
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
            rmscleared.setText(String.valueOf(0));
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE embose_chit_pallu SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
       
            }
            else if("Raw Slub all Over Butta".equals(selBase)){
                   sql="SELECT * from all_over_butta WHERE Design=?";
        pst=con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
        rs=pst.executeQuery();
        if(rs.next()==true){
            int sum1=Integer.parseInt(gr.getText())-Integer.parseInt(GRCleared.getText());
            gr.setText(sum1+"");
            int sum2=Integer.parseInt(rms.getText())-Integer.parseInt(rmscleared.getText());
            rms.setText(sum2+"");
            int sum3=Integer.parseInt(mill.getText())-Integer.parseInt(refrommill.getText());
            mill.setText(sum3+"");
            int tot=Integer.parseInt(total.getText())-(Integer.parseInt(GRCleared.getText())+Integer.parseInt(rmscleared.getText())+Integer.parseInt(refrommill.getText()));
            total.setText(tot+"");
            GRCleared.setText(String.valueOf(0));
            rmscleared.setText(String.valueOf(0));
            refrommill.setText(String.valueOf(0));
                   sql="UPDATE all_over_butta SET RMS=?,GR=?,Mill=?,Total=? WHERE Design=?";
            }
            }
            pst=con.prepareStatement(sql);
            pst.setString(1,rms.getText().trim());
            pst.setString(2,gr.getText().trim());
            pst.setString(3,mill.getText().trim());
            pst.setString(4,total.getText().trim());
            pst.setString(5,design.getText().trim().toUpperCase());
            pst.executeUpdate();
            /*base.setSelectedIndex(0);
            design.setText("");
            rms.setText("");
            gr.setText("");
            rmscleared.setText("");
            GRCleared.setText("");
            refrommill.setText("");
            mill.setText("");
            total.setText("");*/
            new Update_record().setVisible(true);
    
         }
                 catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }
         
             }

                 // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void baseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_baseMouseClicked
DatabaseName();        // TODO add your handling code here:
    }//GEN-LAST:event_baseMouseClicked

    private void designMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_designMouseClicked
DatabaseName();        // TODO add your handling code here:
    }//GEN-LAST:event_designMouseClicked

    private void designKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_designKeyPressed
switch(evt.getKeyCode()){
            case KeyEvent.VK_BACK_SPACE:
                break;
            case KeyEvent.VK_ENTER:
                design.setText(design.getText().toUpperCase());
                break;
            default:
                EventQueue.invokeLater(new Runnable(){
                    @Override
            public void run() {
                String txt=design.getText().toUpperCase();
                autocomplete(txt);//To change body of generated methods, choose Tools | Templates.
            }
                    
                });
        }        // TODO add your handling code here:
    }//GEN-LAST:event_designKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(currentStockForm3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(currentStockForm3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(currentStockForm3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(currentStockForm3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new currentStockForm3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField GRCleared;
    private javax.swing.JButton back;
    private javax.swing.JComboBox<String> base;
    private javax.swing.JTextField design;
    private javax.swing.JTextField gr;
    private javax.swing.JButton grcleared;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField mill;
    private javax.swing.JButton millcleared;
    private javax.swing.JButton next;
    private javax.swing.JTextField refrommill;
    private javax.swing.JButton reset;
    private javax.swing.JTextField rms;
    private javax.swing.JTextField rmscleared;
    private javax.swing.JButton search;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
public void DatabaseName(){
    try{
        
       Connection con=null;
    con=ConnectionManager.getConnection();
    String SelectedBase=base.getSelectedItem().toString().toUpperCase();
    /*String sql="select * from balatan_rich_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        rs.close();
        pst.close();*/
    if("BALATAN BUTTA RICH PALLU".equals(SelectedBase)){
        //System.out.println("In Balatan rich palllu");
        String sql="select *from balatan_rich_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        
        
    }
    else if("RAW SLUB BUTTA RICH PALLU".equals(SelectedBase)){
        //System.out.println("In raw rich pallu");
        String sql="select *from raw_rich_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
       
        
    }
    else if("BALATAN BUTTA CHIT PALLU".equals(SelectedBase)){
        //System.out.println("balatan chit pallu");
        String sql="select *from balatan_chit_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        
        
    }
    else if("RAW SLUB BUTTA CHIT PALLU".equals(SelectedBase)){
        //System.out.println("Raw chit pallu");
        String sql="select *from raw_chit_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
       
        
    }
    else if("BALATAN EMBOSE CHIT PALLU".equals(SelectedBase)){
        //System.out.println("In embose chit pallu");
        String sql="select *from embose_chit_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
       
        
    }
    else if("RAW SLUB ALL OVER BUTTA".equals(SelectedBase)){
        //System.out.println("all over butta");
        String sql="select *from all_over_butta";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        
        
    }
    
    }
    catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }
    
}
public void autocomplete(String txt){
    String complete="";
    int start=txt.length();
    int end=txt.length();
    int a;
    for(a=0;a<names.size();a++){
        if(names.get(a).toString().toUpperCase().startsWith(txt)){
          complete=names.get(a).toString().toUpperCase();
          end=complete.length();
          break;
        }
    }
    if(end>start){
        design.setText(complete);
        design.setCaretPosition(end);
        design.moveCaretPosition(start);
        
    }
    
}
}

