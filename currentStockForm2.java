

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class currentStockForm2 extends javax.swing.JFrame {
static String designToExtract="";
static int user_rights_binary=0;
ArrayList names=new ArrayList();
Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    /**
     * Creates new form currentStockForm2
     */
    public currentStockForm2() {
        initComponents();
        DatabaseName();
     //User_Rights();
    setLocation(screenSize.width/2-getWidth()/2, screenSize.height/2-getHeight()/2);
    setVisible(true);
        base.setEditable(false);
        base.setRenderer(new currentStockForm2.Demo(base.getRenderer()));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
/*public void User_Rights(){
        //System.out.println(LoginPage.name);
        try{  
                int a=1;
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con=DriverManager.getConnection("jdbc:mysql://sql6.freemysqlhosting.net:3306/sql6414727","sql6414727","aq6eT6kxTQ");
                String selQuery="SELECT * FROM login_details where  username=? and Admin=?";
                PreparedStatement pst=con.prepareStatement(selQuery);
                pst.setString(1,LoginPage.name);
                pst.setInt(2,a);
                ResultSet rs=pst.executeQuery();
                if(rs.next()){
                    user_rights_binary=1;
                }
                else{
                    user_rights_binary=0;
                }
                //System.out.println(user_rights_binary);
            }
            catch (ClassNotFoundException ex) {
                System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                //Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } 
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        base = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        design = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        rms = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        gr = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mill = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        next = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Update");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("Software_logo.jpeg")).getImage());
        setPreferredSize(new java.awt.Dimension(840, 700));

        jPanel1.setBackground(new java.awt.Color(31, 35, 71));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Base:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(60, 130, 78, 28);

        base.setBackground(new java.awt.Color(249, 173, 129));
        base.setEditable(true);
        base.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        base.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Balatan Butta Rich Pallu", "Raw Slub Butta Rich Pallu", "Balatan Butta Chit Pallu", "Raw Slub Butta Chit Pallu", "Balatan Embose Chit Pallu", "Raw Slub all Over Butta" }));
        base.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                baseMouseClicked(evt);
            }
        });
        jPanel1.add(base);
        base.setBounds(200, 130, 409, 34);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Design:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(60, 210, 106, 28);

        design.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        design.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                designMouseClicked(evt);
            }
        });
        design.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                designKeyPressed(evt);
            }
        });
        jPanel1.add(design);
        design.setBounds(200, 210, 409, 34);

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("RMS:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(60, 290, 70, 28);

        rms.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(rms);
        rms.setBounds(200, 290, 409, 34);

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("GR:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(70, 380, 50, 28);

        gr.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(gr);
        gr.setBounds(200, 380, 409, 34);

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Mill:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(60, 470, 70, 28);

        mill.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jPanel1.add(mill);
        mill.setBounds(200, 470, 409, 34);

        jLabel6.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(70, 560, 91, 28);

        total.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        total.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalMouseClicked(evt);
            }
        });
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });
        jPanel1.add(total);
        total.setBounds(200, 560, 409, 34);

        search.setBackground(new java.awt.Color(255, 138, 115));
        search.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        jPanel1.add(search);
        search.setBounds(660, 130, 137, 37);

        delete.setBackground(new java.awt.Color(255, 138, 115));
        delete.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel1.add(delete);
        delete.setBounds(660, 210, 137, 37);

        update.setBackground(new java.awt.Color(255, 138, 115));
        update.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel1.add(update);
        update.setBounds(660, 290, 137, 37);

        reset.setBackground(new java.awt.Color(255, 138, 115));
        reset.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        jPanel1.add(reset);
        reset.setBounds(660, 380, 137, 37);

        next.setBackground(new java.awt.Color(255, 138, 115));
        next.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        jPanel1.add(next);
        next.setBounds(660, 470, 137, 37);

        back.setBackground(new java.awt.Color(255, 138, 115));
        back.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(660, 560, 137, 37);

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 48)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Updation");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(280, 20, 271, 54);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        new currentStockForm1();
        dispose();
        
    }//GEN-LAST:event_backActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        base.setSelectedIndex(0);
        design.setText("");
        rms.setText("");
        gr.setText("");
        mill.setText("");
        total.setText("");
    }//GEN-LAST:event_resetActionPerformed
class Demo extends DefaultListCellRenderer{
    // TODO add your handling code here:
    private ListCellRenderer defaultRenderer;
    public Demo(ListCellRenderer defaultRenderer){
        this.defaultRenderer=defaultRenderer;
        
    }
    public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
        Component c = defaultRenderer.getListCellRendererComponent(list, value,
        index, isSelected, cellHasFocus);
    if (c instanceof JLabel) {
      if (isSelected) {
        c.setBackground(new Color(239,40,83));
      } else {
        c.setBackground(Color.white);
      }
    } else {
      c.setBackground(Color.black);
      c = super.getListCellRendererComponent(list, value, index, isSelected,
          cellHasFocus);
    }
        return c;
    }
}
    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
if(design.getText().trim().isEmpty()){
            new AlertBox_FieldEmpty().setVisible(true);
}
else{try{
        
        Connection con=null;
    con=ConnectionManager.getConnection();
    String SelectedBase=base.getSelectedItem().toString();
     designToExtract="";
    designToExtract=design.getText().toUpperCase().trim();
    
    if("Balatan Butta Rich Pallu".equals(SelectedBase)){
        String sql="select *from balatan_rich_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Raw Slub Butta Rich Pallu".equals(SelectedBase)){
        String sql="select *from raw_rich_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Balatan Butta Chit Pallu".equals(SelectedBase)){
        String sql="select *from balatan_chit_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Raw Slub Butta Chit Pallu".equals(SelectedBase)){
        String sql="select *from raw_chit_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    if("Balatan Embose Chit Pallu".equals(SelectedBase)){
        String sql="select *from embose_chit_pallu where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
    else if("Raw Slub all Over Butta".equals(SelectedBase)){
        String sql="select *from all_over_butta where Design=?";
        PreparedStatement pst= con.prepareStatement(sql);
        pst.setString(1,design.getText().trim().toUpperCase());
    ResultSet rs=pst.executeQuery();
    if(rs.next()){
        rms.setText(rs.getString("RMS").trim());
        gr.setText(rs.getString("GR").trim());
        mill.setText(rs.getString("Mill").trim());
        total.setText(rs.getString("Total").trim());
    }
    else{
        new Not_Found().setVisible(true);
        }
        
    }
}
catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }// TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed
    }
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed


    if(design.getText().trim().isEmpty()){
            new Correct_Design().setVisible(true);
    }
    else if(design.getText()!=""){
        try{
             
             Connection con=null;
    con=ConnectionManager.getConnection();
    String SelectedBase=base.getSelectedItem().toString();
            PreparedStatement pst;
            String sql="";
            ResultSet rs;
            int count=0;
            if("Balatan Butta Rich Pallu".equals(SelectedBase)){
                sql="SELECT * from balatan_rich_pallu WHERE Design=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText());
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sql="DELETE from balatan_rich_pallu WHERE `Design`=?";
                        pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    pst.executeUpdate();
                    count=1;
                    base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");
                    new Deleted_record().setVisible(true);
            }
                    
            }
            else if("Raw Slub Butta Rich Pallu".equals(SelectedBase)){
                sql="SELECT * from raw_rich_pallu WHERE Design=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sql="DELETE from raw_rich_pallu WHERE `Design`=?";
                         pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    pst.executeUpdate();
                    count=1;
                    base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");
                    new Deleted_record().setVisible(true);
            }
                    
            }
            else if("Balatan Butta Chit Pallu".equals(SelectedBase)){
                sql="SELECT * from balatan_chit_pallu WHERE Design=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sql="DELETE from balatan_chit_pallu WHERE `Design`=?";
                        pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    pst.executeUpdate();
                    count=1;
                    base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");
                    new Deleted_record().setVisible(true);
            }
                    
            }
            else if("Raw Slub Butta Chit Pallu".equals(SelectedBase)){
                sql="SELECT * from raw_chit_pallu WHERE Design=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sql="DELETE from raw_chit_pallu WHERE `Design`=?";
                        pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    pst.executeUpdate();
                    count=1;
                    base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");
                    new Deleted_record().setVisible(true); 
            }
                    
            }
            else if("Balatan Embose Chit Pallu".equals(SelectedBase)){
                sql="SELECT * from embose_chit_pallu WHERE Design=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sql="DELETE from embose_chit_pallu WHERE `Design`=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    pst.executeUpdate();
                    count=1;
                    base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");
                    new Deleted_record().setVisible(true); 
            }
                    
            }
            else if("Raw Slub all over Butta".equals(SelectedBase)){
                sql="SELECT * from all_over_butta WHERE Design=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                         sql="DELETE from all_over_butta WHERE `Design`=?";
                    pst=con.prepareStatement(sql);
                    pst.setString(1,design.getText().trim().toUpperCase());
                    pst.executeUpdate();
                    count=1;
                    base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");
                    new Deleted_record().setVisible(true); 
            }
                    
            }
            
        
             
        
        }   
         catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
    } 
}
             // TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
new currentStockForm3();
        dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_nextActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed


     if(design.getText().trim().isEmpty()||gr.getText().trim().isEmpty()||mill.getText().trim().isEmpty()||rms.getText().trim().isEmpty()){
            new AlertBox_FieldEmpty().setVisible(true);
        }
     else if(!Pattern.matches("^[0-9]+$",rms.getText())){
             new Invalid_Format().setVisible(true);
             rms.setText("");
             rms.grabFocus();
        }
        else if(!Pattern.matches("^[0-9]+$",gr.getText())){
            new Invalid_Format().setVisible(true);
             gr.setText("");
             gr.grabFocus();
        }
        else if(!Pattern.matches("^[0-9]+$",mill.getText())){
            new Invalid_Format().setVisible(true);
             mill.setText("");
             mill.grabFocus();
        }
        else{
            
                try{
            Connection con=null;
    con=ConnectionManager.getConnection();
            PreparedStatement pst;
                String selBase=base.getSelectedItem().toString();
                String sql="";
                ResultSet rs;
                int count=0;
                
                if("Balatan Butta Rich Pallu".equals(selBase)){
                    
                    sql="select SrNumber from balatan_rich_pallu where Design=?";
                    pst= con.prepareStatement(sql);
                    pst.setString(1,designToExtract);
                    int sno;
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        //System.out.println("hello1");
                        sno = rs.getInt(1);
                        sql="UPDATE balatan_rich_pallu SET Design=?,RMS=?,GR=?,Mill=?,Total=? WHERE SrNumber=?";
                        pst=con.prepareStatement(sql);
                        pst.setString(1,design.getText().trim().toUpperCase());
                        pst.setString(2,rms.getText().trim());
                        pst.setString(3,gr.getText().trim());
                        pst.setString(4,mill.getText().trim());
                        total.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(gr.getText())+Integer.parseInt(mill.getText())));
                        pst.setString(5,total.getText().trim());
                        pst.setString(6,String.valueOf(sno));
                        pst.executeUpdate();
                        count=1;
                    }
                    
                }
                else if("Raw Slub Butta Rich Pallu".equals(selBase)){
                    sql="select SrNumber from raw_rich_pallu where Design=?";
                    pst= con.prepareStatement(sql);
                    pst.setString(1,designToExtract);
                    int sno;
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sno = rs.getInt(1);
                        sql="UPDATE raw_rich_pallu SET Design=?,RMS=?,GR=?,Mill=?,Total=? WHERE SrNumber=?";
                        pst=con.prepareStatement(sql);
                        pst.setString(1, design.getText().trim().toUpperCase());
                        pst.setString(2,rms.getText().trim());
                        pst.setString(3,gr.getText().trim());
                        pst.setString(4,mill.getText().trim());
                        total.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(gr.getText())+Integer.parseInt(mill.getText())));
                        pst.setString(5,total.getText().trim());
                        pst.setString(6,String.valueOf(sno));
                        pst.executeUpdate();
                        count=1;
                    }
                    
                }
                else if("Balatan Butta Chit Pallu".equals(selBase)){
                    sql="select SrNumber from balatan_chit_pallu where Design=?";
                    pst= con.prepareStatement(sql);
                    pst.setString(1,designToExtract);
                    int sno=0;
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sno = rs.getInt(1);
                        sql="UPDATE balatan_chit_pallu SET Design=?,RMS=?,GR=?,Mill=?,Total=? WHERE SrNumber=?";
                        pst=con.prepareStatement(sql);
                        pst.setString(1,design.getText().trim().toUpperCase());
                        pst.setString(2,rms.getText().trim());
                        pst.setString(3,gr.getText().trim());
                        pst.setString(4,mill.getText().trim());
                        total.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(gr.getText())+Integer.parseInt(mill.getText())));
                        pst.setString(5,total.getText().trim());
                        pst.setString(6,String.valueOf(sno));
                        pst.executeUpdate();
                        count=1;
                    }
                    
                }
                else if("Raw Slub Butta Chit Pallu".equals(selBase)){
                    sql="select SrNumber from  raw_chit_pallu where Design=?";
                    pst= con.prepareStatement(sql);
                    pst.setString(1,designToExtract);
                    int sno;
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sno = rs.getInt(1);
                        sql="UPDATE  raw_chit_pallu SET Design=?,RMS=?,GR=?,Mill=?,Total=? WHERE SrNumber=?";
                        pst=con.prepareStatement(sql);
                        pst.setString(1,design.getText().trim().toUpperCase());
                        pst.setString(2,rms.getText().trim());
                        pst.setString(3,gr.getText().trim());
                        pst.setString(4,mill.getText().trim());
                        total.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(gr.getText())+Integer.parseInt(mill.getText())));
                        pst.setString(5,total.getText().trim());
                        pst.setString(6,String.valueOf(sno));
                        pst.executeUpdate();
                        count=1;
                    }
                    
                }
                else if("Balatan Embose Chit Pallu".equals(selBase)){
                    sql="select SrNumber from  embose_chit_pallu where Design=?";
                    pst= con.prepareStatement(sql);
                    pst.setString(1,designToExtract);
                    int sno;
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sno = rs.getInt(1);
                        sql="UPDATE  embose_chit_pallu SET Design=?,RMS=?,GR=?,Mill=?,Total=? WHERE SrNumber=?";
                        pst=con.prepareStatement(sql);
                        pst.setString(1,design.getText().trim().toUpperCase());
                        pst.setString(2,rms.getText().trim());
                        pst.setString(3,gr.getText().trim());
                        pst.setString(4,mill.getText().trim());
                        total.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(gr.getText())+Integer.parseInt(mill.getText())));
                        pst.setString(5,total.getText().trim());
                        pst.setString(6,String.valueOf(sno));
                        pst.executeUpdate();
                        count=1;
                    }
                    
                }
                else if("Raw Slub all over Butta".equals(selBase)){
                    sql="select SrNumber from all_over_butta where Design=?";
                    pst= con.prepareStatement(sql);
                    pst.setString(1,designToExtract);
                    int sno;
                    rs=pst.executeQuery();
                    if(rs.next()==true){
                        sno = rs.getInt(1);
                        sql="UPDATE all_over_butta SET Design=?,RMS=?,GR=?,Mill=?,Total=? WHERE SrNumber=?";
                        pst=con.prepareStatement(sql);
                        pst.setString(1,design.getText().trim().toUpperCase());
                        pst.setString(2,rms.getText().trim());
                        pst.setString(3,gr.getText().trim());
                        pst.setString(4,mill.getText().trim());
                        total.setText(String.valueOf(Integer.parseInt(rms.getText())+Integer.parseInt(gr.getText())+Integer.parseInt(mill.getText())));
                        pst.setString(5,total.getText().trim());
                        pst.setString(6,String.valueOf(sno));
                        pst.executeUpdate();
                        count=1;
                    }
                    
                }
                if(count==1){
                    /*base.setSelectedIndex(0);
                    design.setText("");
                    rms.setText("");
                    gr.setText("");
                    mill.setText("");
                    total.setText("");*/
                    new Update_record().setVisible(true);
                }
            }
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }  
}    
        // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void totalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalMouseClicked
       // TODO add your handling code here:
    }//GEN-LAST:event_totalMouseClicked

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void designKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_designKeyPressed
        // TODO add your handling code here:
        switch(evt.getKeyCode()){
            case KeyEvent.VK_BACK_SPACE:
                break;
            case KeyEvent.VK_ENTER:
                design.setText(design.getText().toUpperCase());
                break;
            default:
                EventQueue.invokeLater(new Runnable(){
                    @Override
            public void run() {
                String txt=design.getText().toUpperCase();
                autocomplete(txt);//To change body of generated methods, choose Tools | Templates.
            }
                    
                });
        }
    }//GEN-LAST:event_designKeyPressed

    private void baseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_baseMouseClicked
DatabaseName();        // TODO add your handling code here:
    }//GEN-LAST:event_baseMouseClicked

    private void designMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_designMouseClicked
DatabaseName();        // TODO add your handling code here:
    }//GEN-LAST:event_designMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(currentStockForm2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(currentStockForm2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(currentStockForm2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(currentStockForm2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new currentStockForm2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JComboBox<String> base;
    private javax.swing.JButton delete;
    private javax.swing.JTextField design;
    private javax.swing.JTextField gr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField mill;
    private javax.swing.JButton next;
    private javax.swing.JButton reset;
    private javax.swing.JTextField rms;
    private javax.swing.JButton search;
    private javax.swing.JTextField total;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
public void DatabaseName(){
    try{
        
       Connection con=null;
    con=ConnectionManager.getConnection();
    String SelectedBase=base.getSelectedItem().toString().toUpperCase();
    /*String sql="select * from balatan_rich_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        rs.close();
        pst.close();*/
    if("BALATAN BUTTA RICH PALLU".equals(SelectedBase)){
        //System.out.println("In Balatan rich palllu");
        String sql="select *from balatan_rich_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        
        
    }
    else if("RAW SLUB BUTTA RICH PALLU".equals(SelectedBase)){
        //System.out.println("In raw rich pallu");
        String sql="select *from raw_rich_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
       
        
    }
    else if("BALATAN BUTTA CHIT PALLU".equals(SelectedBase)){
        //System.out.println("balatan chit pallu");
        String sql="select *from balatan_chit_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        
        
    }
    else if("RAW SLUB BUTTA CHIT PALLU".equals(SelectedBase)){
        //System.out.println("Raw chit pallu");
        String sql="select *from raw_chit_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
       
        
    }
    else if("BALATAN EMBOSE CHIT PALLU".equals(SelectedBase)){
        //System.out.println("In embose chit pallu");
        String sql="select *from embose_chit_pallu";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
       
        
    }
    else if("RAW SLUB ALL OVER BUTTA".equals(SelectedBase)){
        //System.out.println("all over butta");
        String sql="select *from all_over_butta";
        java.sql.Statement pst=con.createStatement();
        ResultSet rs=pst.executeQuery(sql);
        while(rs.next()){
            String Name=rs.getString("Design");
            names.add(Name);
        }
        
        
    }
    
    }
    catch (ClassNotFoundException | SQLException e) {
            System.out.println(e.getMessage());
        }
    
}
public void autocomplete(String txt){
    String complete="";
    int start=txt.length();
    int end=txt.length();
    int a;
    for(a=0;a<names.size();a++){
        if(names.get(a).toString().toUpperCase().startsWith(txt)){
          complete=names.get(a).toString().toUpperCase();
          end=complete.length();
          break;
        }
    }
    if(end>start){
        design.setText(complete);
        design.setCaretPosition(end);
        design.moveCaretPosition(start);
        
    }
    
}
}
